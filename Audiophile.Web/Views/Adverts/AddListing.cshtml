@model AddListingStep1ViewModel
@{
    var lang = Constants.GetLang(Context.Session.GetString("lang"));
    ViewBag.Title = Localization.Get("İlan Ekle", "Add Listing", lang);
    Layout = "_Layout";
}
@section style{
    <link rel="stylesheet" href="~/Content/css/dropzone.min.css">
    <style>

        .custom-radio .custom-control-input:checked ~ .custom-control-label::before, .custom-control-input:checked ~ .custom-control-label::before {
            background-color: #e70c1e !important;
        }


        .dz-image-preview {
            display: table-cell;
            text-align: center;
        }

        #sortable {
            list-style-type: none;
            margin: 0;
            padding: 0;
            width: 100%;
        }

            #sortable li {
                margin: 3px 3px 3px 0;
                padding: 1px;
                float: left;
                text-align: center;
                cursor: grab;
            }

        .crop-area #canvas, #canvas2 {
            height: 300px;
            width: 300px;
            background-color: #ffffff;
            cursor: default;
            border: 1px solid black;
        }

        .div-block-17.form-wrapper.form-hesaplar.urun-ekle {
            background-color: white;
        }

        .div--marka {
            width: 100%;
            margin-bottom: 71px;
            padding: 0px;
            border: 1px #e4e4e4;
            background-color: white;
        }

        @@media screen and (min-width: 1200px) {

            .w-container {
                max-width: 906px !important;
            }

            .register-form {
                width: 80%;
                margin: auto;
            }

                .register-form .w-checkbox-input, .register-form .w-radio-input,
                .checkbox-field-2 {
                    float: none !important;
                }
        }

        .sec-altsayfa.sec-hesaplar.section-1 {
            background-color: #fff !important;
        }

        .div-block-20.div-ilan.hesap {
            background-color: white !important;
        }

        @@media screen and (max-width: 992px) {
            .h2.h4.h-kat {
                margin-bottom: 0px;
            }

            .div-block-20.div-ilan.hesap {
                padding-top: 25px;
                padding-bottom: 0px;
            }

            .radio-button {
                margin-right: 5px;
            }
        }
    </style>
    <link rel="stylesheet" href="~/Content/css/dropzone.min.css">
    <link rel="stylesheet" href="~/Content/css/cropper.css">

}
<div class="sec-altsayfa sec-hesaplar section-1">
    <div class="w-container">
        <div class="w-clearfix">
            <div class="div-block-20 div-ilan hesap urun-ekle w-clearfix">
                <h4 class="h2 h4 h-kat h-kategori">@ViewBag.Title</h4>
            </div>

            @{
                await Html.RenderPartialAsync("~/Views/Partials/AddListingSteps.cshtml", 1);
            }
            <div class="div-block-17 form-wrapper form-hesaplar urun-ekle w-clearfix">
                <h3 class="heading-2 form-text">@Localization.Get("İlan Bilgileri", "Product Information", lang)</h3>

                @using (Html.BeginForm("AddListing", "Adverts", FormMethod.Post, new { @class = "w-clearfix", id = "main-form", validate = "novalidate" }))
                {
                    <div class="form-block-5 w-form">
                        <label class="field-label">@Localization.Get("Başlık", "Title", lang) </label>
                        <input class="textfield w-input text-transform-capitalize" maxlength="70" name="Title" type="text" value="@(Model.Advert?.Title)" required onkeydown="letterControl(this,event)">

                        <label class="field-label">@Localization.Get("İlan Açıklaması", "Description", lang) </label>
                        <textarea class="textfield w-input richText" maxlength="5000" name="Content" rows="5">@(Model.Advert?.Content)</textarea>
                        @*@Html.TextAreaFor(model => model.Advert.Content, 25, 25, new { @class = "form-control" })*@


                        <div class="row mb-0">
                            <div class="col-md-4">
                                <label class="field-label">@Localization.Get("Para Cinsi", "Currency", lang)</label>
                                <select class="dropdown-4 select-urun urun-ozellik-select w-dropdown textfield valid" name="MoneyTypeID" id="moneyType" required>
                                    <option value="">@Localization.Get("Seçiniz", "Choose", lang)</option>
                                    <option value="@((int)Enums.MoneyType.tl)">TL</option>
                                    <option value="@((int)Enums.MoneyType.usd)">USD</option>
                                    <option value="@((int)Enums.MoneyType.euro)">EUR</option>
                                    <option value="@((int)Enums.MoneyType.gbp)">GBP</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label class="field-label">@Localization.Get("Yenisinin Satış Fiyatı", "Price When New", lang) </label>
                                <input class="textfield w-input" min="0" name="NewProductPrice" id="newPrice" type="number" value="@(Model.Advert?.NewProductPrice)">
                            </div>
                            <div class="col-md-4">
                                <label class="field-label">@Localization.Get("Satış Fiyatınız", "Your Sales Price", lang) </label>
                                <input class="textfield w-input mb-0" min="0" name="Price" id="price" type="number" required value="@(Model.Advert?.Price)">
                                <label class="text-danger priceMessage" style="display:none">@Localization.Get("Yenisinin satış fiyatından büyük olamaz bu yüzden yenisinin fiyatı atandı", "Cannot be greater than the sale price of the new one so the price of the new one is assigned", lang)  </label>
                            </div>
                        </div>

                        <div class="div--marka w-clearfix">
                            <div class="p-b-5">
                                <label class="field-label">@Localization.Get("İlan Özellikleri", "Product Features", lang)</label>
                            </div>
                            <hr><br>
                            <div class="row">
                                <div class="col-md-4">
                                    <label class="field-label">@Localization.Get("Marka", "Brand", lang) </label>
                                    <input class="textfield w-input" maxlength="100" name="Brand" type="text" required value="@(Model.Advert?.Brand)">
                                </div>
                                <div class="col-md-4">
                                    <label class="field-label">@Localization.Get("Model", "Model", lang) </label>
                                    <input class="textfield w-input" maxlength="100" name="Model" type="text" required value="@(Model.Advert?.Model)">
                                </div>
                                <div class="col-md-4">
                                    <label class="field-label">@Localization.Get("Durumu", "Status", lang)</label>
                                    <select class="dropdown-4 select-urun urun-ozellik-select w-dropdown textfield valid" name="ProductStatus" id="productStatus" required>
                                        <option value="">@Localization.Get("Seçiniz", "Choose", lang)</option>
                                        <option>1/5</option>
                                        <option>2/5</option>
                                        <option>3/5</option>
                                        <option>4/5</option>
                                        <option>@Localization.Get("Yeni", "New", lang)</option>
                                    </select>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-4">
                                    <label class="field-label">@Localization.Get("Kategori", "Category", lang)</label>
                                    <select id="categories" onchange="fillSubcategories(this.value)" class="dropdown-4 select-urun urun-ozellik-select w-dropdown textfield valid" required>
                                        <option value="">@Localization.Get("Seçiniz", "Choose", lang)</option>
                                        @foreach (var category in Model.AdvertCategories)
                                        {
                                            <option value="@category.ID">@category.Name</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="field-label">@Localization.Get("Alt Kategori", "Subcategory", lang)</label>
                                    <select class="dropdown-4 select-urun urun-ozellik-select w-dropdown textfield valid" name="CategoryID" id="subcategories" required>
                                        <option value="">@Localization.Get("Seçiniz", "Choose", lang)</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="field-label">@Localization.Get("Miktar", "Amount", lang) </label>
                                    <input class="textfield w-input" min="0" name="StockAmount" type="number" value="@(Model.Advert?.StockAmount)" required>
                                </div>
                            </div>
                        </div>

                        <div class="div--marka w-clearfix">
                            <div class="p-b-5">
                                <label class="field-label">@Localization.Get("İlan Fotoğrafları", "Product Photos", lang)</label>
                                <input type="hidden" name="SelectedPhotos" id="selectedPhotos" value="" />
                            </div>
                            <hr><br>
                            @if (Model.Advert?.Photos != null && Model.Advert.Photos.Any())
                            {
                                <div class="row">
                                    @*<label onclick="saveOrder()" class="button w-button m-r-10 float-left m-b-10">@Localization.Get("Sıralamayı Kaydet", "Save Photos Order", lang)</label>*@
                                    <ul id="sortable">
                                        @foreach (var photo in Model.Advert.Photos.OrderBy(p => p.OrderNumber))
                                        {
                                            <li class="ui-state-default" id="q_@photo.ID">
                                                <div class="card width-rem-10">
                                                    <img class="card-img-top old-image" src="@photo.Source" />
                                                    <div class="card-body" style="cursor:default">
                                                        <h5 class="card-title">@photo.CreatedDate.ToString("g")</h5>
                                                        <div class="custom-control custom-radio">
                                                            <input onclick="updateMainImage(@photo.ID)" @(Model.Advert.Thumbnail == photo.Thumbnail ? "checked" : " ") type="radio" class="custom-control-input" name="mainImage" value="@photo.ID" id="inputM_@photo.ID">
                                                            <label class="custom-control-label" style="padding-top: 2px;" for="inputM_@photo.ID">@Localization.Get("Ana fotoğraf", "Main photo", lang)</label>
                                                        </div>
                                                        <a href="#" onclick="ask(@photo.ID, '')" style="width: 72px !important;" class="button w-button button-sil m-t-10 display-inline-grid">@Localization.Get("Sil", "Delete", lang)</a>
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            }


                            <h5>@Localization.Get("İşaretlediğiniz görsel ana fotoğraf olarak kullanılacak.", "Marked picture will be used as main picture", lang)</h5>
                            <small>*@Localization.Get("Max. Dosya Boyutu: 5mb. Max. 10 dosya.", "Max. File Size: 5mb. Max. 10 file.", lang) </small>
                            &nbsp;<small style="color:red">*@Localization.Get("Sadece JPG-JPEG-BMP-PNG-GIF formatında resim yükleyebilirsiniz", "Only JPG-JPEG-BMP-PNG-GIF image  extensions are allowed.", lang) </small>
                            <div>
                                <form action="/Adverts/UploadPhoto" enctype="multipart/form-data" method="POST">
                                    <div class="dropzone" id="myDropzone">
                                        <div class="dz-message" data-dz-message>
                                            <span>
                                                @Localization.Get("Fotoğraf eklemek için buraya tıklayınız veya fotoğrafları sürükleyiniz.", "Click here to add photos or drag photos", lang)
                                            </span>
                                        </div>
                                    </div> <br />
                                </form>
                            </div>
                        </div>


                        <div class="div--marka w-clearfix">
                            <div class="p-b-5">
                                <label class="field-label">@Localization.Get("Ödeme Seçenekleri", "Accepted Payment Method", lang)</label>
                            </div>
                            <hr><br>
                            <p>
                                @Localization.Get("Kullanıcılar bu ürünü ne şekilde satın alabilirler?", "How users can buy this product?", lang)
                            </p>
                            @if (Model.IsPaymentStepActive)
                            {

                                if (lang == 1)
                                {
                                    <div id="NeedForPay" class="alert alert-warning" role="alert">
                                        Ücretsiz ilan  limiti olan @Model.FreeAdvertLimit adet ilanı tamamladınız. Yeni ilan giriş tutarı olan @Model.AdvertPrice TL. ödeme adımında alınacaktır . Ancak ödeme türünü <b>'Güvenli Ödeme Gittibu ile Satın'</b> olarak seçmeniz durumunda ilanınız <u><b>ücretsiz</b></u> olarak yayınlanır ve ek ücret talep etmeksizin ana sayfada gösterilir.
                                    </div>
                                }
                                else
                                {
                                    <div id="NeedForPay" class="alert alert-warning" role="alert">
                                        You filled @Model.FreeAdvertLimit  limit.
                                        Advertisement fee is TL @Model.AdvertPrice. However; by choosing the payment type as <b>'Audiophile Secure Payment Gittibu'</b> will enable you to advertise  <u><b>free </b></u>. Your ad will be visible in main page as well.
                                    </div>
                                }
                            }





                            <div class="row mb-0">
                                <div class="col-xs-12 col-sm-12 col-md-4 custom-control custom-radio radio-button-field-3 r3 w-checkbox radio-33">
                                    <input type="radio" class="custom-control-input" required name="PaymentMethodID" id="pay_@((int)Enums.PaymentMethods.BankaHavalesiIlePesin)" value="@((int)Enums.PaymentMethods.BankaHavalesiIlePesin)">
                                    <label class="custom-control-label field-label-4" for="pay_@((int)Enums.PaymentMethods.BankaHavalesiIlePesin)">@Localization.Get("Banka Havalesi İle Peşin Ödeme", "Wire Transfer", lang)</label>
                                </div>
                                <div class="custom-control custom-radio col-xs-12 col-sm-12 col-md-4 radio-button-field-3 r3 w-checkbox radio-33">
                                    <input type="radio" class="custom-control-input" required name="PaymentMethodID" id="pay_@((int)Enums.PaymentMethods.BankaHavalesiIleTeslimattanSonra)" value="@((int)Enums.PaymentMethods.BankaHavalesiIleTeslimattanSonra)">
                                    <label class="custom-control-label field-label-4" for="pay_@((int)Enums.PaymentMethods.BankaHavalesiIleTeslimattanSonra)">@Localization.Get("Banka Havalesi İle Teslimattan Sonra", "Wire Transfer After Delivery", lang)</label>
                                </div>
                                <div class="custom-control custom-radio col-xs-12 col-sm-12 col-md-4 radio-button-field-3 r3 w-checkbox radio-33">
                                    <input type="radio" class="custom-control-input" required name="PaymentMethodID" id="pay_@((int)Enums.PaymentMethods.EldenOdeme)" value="@((int)Enums.PaymentMethods.EldenOdeme)">
                                    <label class="custom-control-label field-label-4" for="pay_@((int)Enums.PaymentMethods.EldenOdeme)"> @Localization.Get("Elden Ödeme", "Cash in Advange", lang)</label>
                                </div>
                            </div>

                            <div class="custom-control custom-radio row radio-button-field-3 r3 r2 rson w-checkbox m-r-0 m-l-0 gittibupay">

                                <input type="radio" class="custom-control-input" required name="PaymentMethodID" id="pay_@((int) Enums.PaymentMethods.KrediKartiIle)" value="@((int) Enums.PaymentMethods.KrediKartiIle)">
                                <label class="custom-control-label field-label-4" for="pay_@((int) Enums.PaymentMethods.KrediKartiIle)">
                                    @Localization.Get("Güvenli Ödeme Gittibu ile Satın", "Audiophile Secure Payment with Gittibu", lang)<br />
                                    <span style="color:red; font-weight:400">@Localization.Get("  ( Ücretsiz Ana Sayfa Dopingi Hediye )", "( Free Main Page Doping )", lang)</span>
                                </label>


                            </div>


                            @{
                                var installment = Localization.Get("Taksit", "Settlem", lang);
                            }

                            <div class="row justify-content-center display-none" id="installments">
                                <div class="col-md-4 align-self-center text-center">
                                    @if (!Model.CanUseSecurePayment)
                                    {
                                        <br />
                                        @Localization.Get("Güvenli ödeme ile satış yapabilmek için “Güvenli Ödeme Bilgileri” nizi girmeniz yasal bir mecburiyettir.", "To sell with secure payment, it is a legal obligation to fill out your Secure Payment Information.", lang)
                                        <a target="_blank" href="@Constants.GetURL((int) Enums.Routing.UyelikBilgilerim, lang)"> @Localization.Get("Bilgilerimi Güncelle", "Update My Seller Informations", lang) </a>
                                    }
                                    else
                                    {
                                        <h5>
                                            @Localization.Get("Alıcılar hangi taksit seçeneklerini kullanabilir?", "How many months you credit your buyer?", lang)
                                            <br>
                                            @Localization.Get("Boş bırakırsanız tüm taksitler kullanılır", "If you leave empty, all options will be valid", lang)
                                        </h5>

                                        <table class="table table-bordered">
                                            @if (Model.Advert?.AvailableInstallments != null)
                                            {
                                                foreach (var insItem in ViewBag.AvailableInstallments.Split(','))
                                                {
                                                    <tr>
                                                        
                                                        <td><input class="installment" id="@("ins" + @insItem)" type="checkbox" value="@insItem"  @(Model.Advert?.AvailableInstallments.Split(',').Any(x=>x == insItem) == true ? "checked" : "")/> </td>
                                                        @if ( Convert.ToInt16(insItem) > 1)
                                                        {
                                                            <td class="text-left">@insItem  @installment</td>
                                                        }
                                                        else
                                                        {
                                                            <td class="text-left"> @Localization.Get("Tek Çekim", "One Mount", lang)</td>

                                                        }
                                                    </tr>
                                                }

                                                @*<tr>
                                                        <td><input class="installment" id="ins1" @(Model.Advert?.AvailableInstallments.Contains("1") == true ? "checked" : "") type="checkbox" value="1" /> </td>
                                                        <td class="text-left">@Localization.Get("Tek Çekim", "One Mount", lang)</td>
                                                    </tr>

                                                    <tr>
                                                        <td><input class="installment" id="ins2" @(Model.Advert?.AvailableInstallments.Contains("2") == true ? "checked" : "") type="checkbox" value="2" /> </td>
                                                        <td class="text-left">2 @installment</td>
                                                    </tr>
                                                    <tr>
                                                        <td><input class="installment" id="ins3" @(Model.Advert?.AvailableInstallments.Contains("3") == true ? "checked" : "") type="checkbox" value="3" /> </td>
                                                        <td class="text-left">3 @installment</td>
                                                    </tr>
                                                    <tr>
                                                        <td><input class="installment" id="ins6" @(Model.Advert?.AvailableInstallments.Contains("6") == true ? "checked" : "") type="checkbox" value="6" /> </td>
                                                        <td class="text-left">6 @installment</td>
                                                    </tr>
                                                     <tr>
                                                            <td><input class="installment" id="ins9" @(Model.Advert?.AvailableInstallments.Contains("9") == true ? "checked" : "") type="checkbox" value="9" /> </td>
                                                            <td class="text-left">9 @installment</td>
                                                        </tr>
                                                        <tr>
                                                            <td><input class="installment" id="ins12" @(Model.Advert?.AvailableInstallments.Contains("12") == true ? "checked" : "") type="checkbox" value="12" /> </td>
                                                            <td class="text-left">12 @installment</td>
                                                        </tr>*@
                                            }
                                            else
                                            {
                                                foreach (var insItem in ViewBag.AvailableInstallments.Split(','))
                                                {
                                        <tr>
                                            <td><input class="installment" id="@("ins" + @insItem)" type="checkbox" value="@insItem" /> </td>
                                            @if (Convert.ToInt16(insItem) > 1)
                                            {
                                                <td class="text-left">@insItem  @installment</td>
                                            }
                                            else
                                            {
                                                <td class="text-left"> @Localization.Get("Tek Çekim", "One Mount", lang)</td>

                                            }
                                        </tr>
                                                }
                                                @*<tr>
                                                        <td><input class="installment" id="ins1" type="checkbox" value="1" /> </td>
                                                        <td class="text-left">@Localization.Get("Tek Çekim", "One Mount", lang)</td>
                                                    </tr>

                                                    <tr>
                                                        <td><input class="installment" id="ins2" type="checkbox" value="2" /> </td>
                                                        <td class="text-left">2 @installment</td>
                                                    </tr>
                                                    <tr>
                                                        <td><input class="installment" id="ins3" type="checkbox" value="3" /> </td>
                                                        <td class="text-left">3 @installment</td>
                                                    </tr>
                                                    <tr>
                                                        <td><input class="installment" id="ins6" type="checkbox" value="6" /> </td>
                                                        <td class="text-left">6 @installment</td>
                                                    </tr>*@
                                                @*<tr>
                                                        <td><input class="installment" id="ins9" type="checkbox" value="9" /> </td>
                                                        <td class="text-left">9 @installment</td>
                                                    </tr>
                                                    <tr>
                                                        <td><input class="installment" id="ins12" type="checkbox" value="12" /> </td>
                                                        <td class="text-left">12 @installment</td>
                                                    </tr>*@
                                            }

                                        </table>
                                    }
                                </div>
                            </div>

                            <div id="installmentsChoices">

                            </div>
                            <div id="prices">

                            </div>

                        </div>

                        <button type="submit" @Html.Raw(Model.Advert != null ? "" : "disabled=\"disabled\"") id="save" class="button button-main button-satn button-submit submit-center w-button">@Localization.Get("Kaydet ve Devam Et", "Save and Continue", lang)</button>
                        <div class="warning-advert">
                            @Html.Raw(Model.WarningAdverts)
                        </div>
                    </div>
                }

            </div>
        </div>
    </div>

    <!-- Modal -->
</div>
<div id="preview" class="preview display-none">

    <div>
        <div class="dz-preview dz-file-preview">
            <input type="radio" name="main-image" class="m-100-1 f-l" />
            <img data-dz-thumbnail />
            <div class="dz-progress">
                <span class="dz-upload" data-dz-uploadprogress></span>
            </div>
            @*<button onclick="editPhoto()" class="m-t-5 m-b--10" >Düzenle</button>*@

            <div class="dz-success-mark">
                <span>✔</span>
            </div>
            <div class="dz-error-mark">
                <span>✘</span>
            </div>
            <div class="dz-error-message">
                <span data-dz-errormessage></span>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    <script src="~/Content/script/cropper.js"></script>
    <script src="~/Content/script/jquerycropper.js"></script>
    <script src="~/Content/script/jquery-ui.min.js"></script>
    <script src="/Content/plugins/dropzone/dropzone.js"></script>
    <script src="~/Content/plugins/canvas-to-blob/canvas-to-blob.min.js"></script>
    <script src="~/Content/plugins/tinymce/tinymce.js"></script>
    <script>
        var selectedPhotos = [];
        var addedPhotosCount = 0;
        var uploadedFileCount = 0;
        Dropzone.prototype.defaultOptions.dictRemoveFile = '@Localization.Get("Resmi Kaldır", "Remove File", lang)';

        Dropzone.options.myDropzone = {
            url: '/AddListing/UploadPhoto',
            autoProcessQueue: true,
            uploadMultiple: true,
            parallelUploads: 10,
            timeout: 540000,
            maxFiles: 10,
            maxFilesize: 60,
            paramName: "Files",
            acceptedFiles: 'image/*',
            addRemoveLinks: true,
            transformFile: function(file, done) {

                if (file.size < 5242880) {
                    // Create Dropzone reference for use in confirm button click handler
                    var myDropZone = this;
                    // Create the image editor overlay
                    var editor = document.createElement('div');
                    editor.style.position = 'fixed';
                    editor.style.left = 0;
                    editor.style.right = 0;
                    editor.style.top = 0;
                    editor.style.bottom = 0;
                    editor.style.zIndex = 9999;
                    editor.style.backgroundColor = '#000';
                    document.body.appendChild(editor);
                    // Create confirm button at the top left of the viewport
                    var buttonConfirm = document.createElement('button');
                    buttonConfirm.classList.add("button");
                    buttonConfirm.classList.add("w-button");
                    buttonConfirm.style.position = 'absolute';
                    buttonConfirm.style.width = '120px';
                    buttonConfirm.style.left = '10px';
                    buttonConfirm.style.top = '10px';
                    buttonConfirm.style.zIndex = 9999;
                    buttonConfirm.textContent = 'Tamam';
                    editor.appendChild(buttonConfirm);

                    var buttonRotate = document.createElement('button');
                    buttonRotate.classList.add("button");
                    buttonRotate.classList.add("w-button");
                    buttonRotate.style.position = 'absolute';
                    buttonRotate.style.left = '10px';
                    buttonRotate.style.width = '120px';
                    buttonRotate.style.top = '52px';
                    buttonRotate.style.zIndex = 9999;
                    buttonRotate.textContent = 'Sola Döndür';
                    editor.appendChild(buttonRotate);

                    var buttonRotateTers = document.createElement('button');
                    buttonRotateTers.classList.add("button");
                    buttonRotateTers.classList.add("w-button");
                    buttonRotateTers.style.position = 'absolute';
                    buttonRotateTers.style.left = '10px';
                    buttonRotateTers.style.top = '94px';
                    buttonRotateTers.style.width = '120px';
                    buttonRotateTers.style.zIndex = 9999;
                    buttonRotateTers.textContent = 'Sağa Döndür';
                    editor.appendChild(buttonRotateTers);

                    var buttonCancel = document.createElement('button');
                    buttonCancel.classList.add("button");
                    buttonCancel.classList.add("w-button");
                    buttonCancel.style.position = 'absolute';
                    buttonCancel.style.left = '10px';
                    buttonCancel.style.top = '142px';
                    buttonCancel.style.width = '120px';
                    buttonCancel.style.zIndex = 9999;
                    buttonCancel.textContent = 'İptal';
                    editor.appendChild(buttonCancel);

                    var image = new Image();
                    image.src = URL.createObjectURL(file);
                    editor.appendChild(image);
                    var cropper = new Cropper(image,
                        {
                            viewMode: 0,
                            rotatable: true,
                            aspectRatio: 1,
                            ready: function() {
                                cropper.zoom(-0.5);
                            }
                        });
                    buttonCancel.addEventListener("click", function () {
                        document.body.removeChild(editor);
                        myDropZone.removeFile(file);
                    });
                    buttonRotate.addEventListener('click',
                        function() {

                            cropper.rotate(-90);
                        });


                    buttonRotateTers.addEventListener('click',
                        function() {

                            cropper.rotate(90);

                        });
                    buttonConfirm.addEventListener('click',
                        function() {
                            // Get the canvas with image data from Cropper.js
                            var canvas = cropper.getCroppedCanvas({
                                maxWidth: 2048,
                                maxHeight: 2048,
                                fillColor: "#fff"
                            });
                            // Turn the canvas into a Blob (file object without a name)
                            canvas.toBlob(function (blob) {

                                // Create a new Dropzone file thumbnail
                                myDropZone.createThumbnail(
                                    blob,
                                    myDropZone.options.thumbnailWidth,
                                    myDropZone.options.thumbnailHeight,
                                    myDropZone.options.thumbnailMethod,
                                    false,
                                    function(dataURL) {

                                        // Update the Dropzone file thumbnail
                                        myDropZone.emit('thumbnail', blob, dataURL);
                                        // Return the file to Dropzone
                                        done(blob);
                                    });
                            });
                            // Remove the editor from the view
                            document.body.removeChild(editor);
                        });

                }

            },
            previewTemplate: $('#preview').html(),
            init: function () {
                 var bntText = '@Localization.Get("Kaydet ve Devam Et", "Save and Continue", lang)';
                var bntTextWait = '  <i class="fa fa-spinner fa-spin fa-1x fa-fw"></i>@Localization.Get("Resimler Yükleniyor...", "'Images are uploading...", lang)'.replace('&#xFC;', 'ü');

                var myDropzone = this;
                this.on("sendingmultiple",
                    function(data, xhr, formData) {
                        formData.append("MainImage", $('input[name="main-image"]:checked').val());
                    });
                this.on("addedfile",
                    function(file) {

                        if (file.size > 5242880) {
                            @*console.log("Dikkat 10 mb büyük!"); *@
                            //alert("DİKKAT 5 MB DAN BÜYÜK RESİM YÜKLEYEMEZSİNİZ.");
                            notify("error", "DİKKAT 5 MB DAN BÜYÜK RESİM YÜKLEYEMEZSİNİZ.");
                            var id = parseInt($(file.previewElement).attr("id"));
                            @*console.log("remove it: " + id); *@
                            $(file.previewElement).remove();
                            removeFromSelectedPhotos(id);
                        } else {
                            addedPhotosCount++;
                            $("#save").html(bntTextWait).attr('disabled', 'disabled');
                        }
                        $(file.previewElement).find('input').val(file.name);
                    });
                this.on("removedfile",
                    function(file) {
                        var id = parseInt($(file.previewElement).attr("id"));
                        @*console.log("remove it: " + id); *@
                        $(file.previewElement).remove();
                        removeFromSelectedPhotos(id);
                        addedPhotosCount--;
                        uploadedFileCount--;
                    });
                this.on("success",
                    function(file, response) {
                        @*console.log("success file", file);
                        //console.log("success response", response); *@
                        if (response.isSuccess === true) {
                            uploadedFileCount++;
                            @*console.log("add: " + response.id); *@
                            addToSelectedPhotos(response.id);
                            $(file.previewElement).find(".dz-progress").remove();
                            $(file.previewElement).attr("id", response.id);
                            $($(file.previewElement).find("input")).attr("value", response.id);
                        } else {
                            myDropzone.removeFile(file);
                            notify("error", response.message);
                        }
                        if (addedPhotosCount < uploadedFileCount) {
                            // $("#save").html(bntTextWait).attr('disabled', 'disabled');
                        } else if (uploadedFileCount >= addedPhotosCount) {
                            $("#save").text(bntText).removeAttr('disabled');
                        }
                    });
                this.on("maxfilesexceeded", function (file) {
                    myDropzone.removeFile(file);
                    var message = file.name + '@Localization.Get(" isimli resim 10 adet maksimum resim sınırını geçtiği için yüklenmedi.", " image is not loaded because it exceeds the maximum image limit of 10.", lang)';
                    notify("error", message);
                });
            }

        };

        function addToSelectedPhotos(id) {
            selectedPhotos.push(id);
            updatePhotosInput();
        }

        function removeFromSelectedPhotos(id) {
            for (var i = 0; i < selectedPhotos.length; i++) {
                if (selectedPhotos[i] === id) {
                    selectedPhotos.splice(i, 1);
                }
            }
            updatePhotosInput();
        }

        function updatePhotosInput() {
            var result = "";
            for (var i = 0; i < selectedPhotos.length; i++) {
                result += selectedPhotos[i] + ",";
            }
            result = result.substring(0, result.length - 1);
            $('#selectedPhotos').val(result);
            $("#save").removeAttr("disabled");
        }

        $('#main-form').on("submit",
            function(e) {
                @* console.log("submitting"); *@
                var tinymceContent = tinymce.activeEditor.getContent({ format: 'text' });
                if (tinymceContent.trim() === '') {
                    e.preventDefault();
                    notify("error", '@Localization.Get("İlan Açıklaması boş olamaz.", "Advert content can not be emty.", lang)');
                    return false;
                }

                if ($('.dz-file-preview:visible').length === 0 && $('.old-image').length === 0) {
                    @*console.log("stop submit");*@
                    e.preventDefault();
                    notify("error",
                        '@Localization.Get("En az 1 fotoğraf yükleyiniz.", "Upload at least 1 photo.", lang)');
                    return false;
                }
               @* console.log("submit");*@
            }
        );
        $(function () {
            tinymce.init({
                selector: '.richText',
                plugins: 'image code',
                toolbar: 'undo redo | image code',
                menubar: false,
                plugins: [
                    "advlist autolink lists link image charmap print preview hr anchor pagebreak",
                    "searchreplace wordcount visualblocks visualchars code fullscreen",
                    "insertdatetime media nonbreaking save table contextmenu directionality",
                    "emoticons template paste textcolor colorpicker textpattern"
                ],
                image_advtab: true,
                toolbar: 'undo redo |  formatselect | bold italic underline backcolor  | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',

                init_instance_callback: function (ed) {
                    //ed.execCommand('mceImage');
                }
            });


       })
    </script>
    <script>
        function getPrices() {

            if (parseInt($('input[name="PaymentMethodID"]:checked').val()) ===
                @((int) Enums.PaymentMethods.KrediKartiIle)) {
                if ("@Model.CanUseSecurePayment" === "False") {
                    $('#save').css("display", "none");
                } else {
                    $('#save').css("display", "block");
                }

                if (parseInt($('#moneyType').val()) === @((int) Enums.MoneyType.tl)) {


                    try {
                        var price = parseFloat($('#price').val());
                        @*console.log('getPrices ==> ' + price);*@

                        $('#prices').html('@Localization.Get("Yükleniyor...", "Loading...", lang)');

                        var request = $.ajax({
                            url: "/GetInstallmentPrices",
                            method: "POST",
                            data: { price }
                        });
                        request.done(function (msg) {                           
                            $('#prices').html(msg);
                        });
                        request.catch(function() {
                            $('#prices').html('@Localization.Get("Bir sorun oluştu ve taksitli ücretlere erişilemedi.",
                                                   "There was a problem and the installment fees could not be accessed.",
                                                   lang)');
                        });
                    } catch (e) {
                        $('#prices').html('@Localization.Get("Bir sorun oluştu ve taksitli ücretlere erişilemedi.",
                                               "There was a problem and the installment fees could not be accessed.",
                                               lang)');
                    }
                } else {
                    notify('error',
                        '@Localization.Get("Kredi kartı ile ödeme için para tipi TL olmalıdır."
                             , "For credit card payment, the type of money must be TL.", lang)');
                }
            }
        }

        $('#price').on('change',
            function() {
                getPrices();
            });
        $('#moneyType').on('change',
            function() {
                var val = parseInt($('#moneyType').val());
                if (val !== 1 && $('input[name="PaymentMethodID"]:checked').val() == "4") {
                    $('#pay_4').prop('checked', false);
                    $('#installments').css("display", "none");
                    $('#prices').html("");
                }
            });
    </script>
    <script>
        var categories = @Html.Raw(Json.Serialize(Model.AdvertCategories));
        @*console.log(categories);*@

        function fillSubcategories(id) {
            $('#subcategories').html('');
            categories.forEach(function(category) {
                if (category.id === parseInt(id)) {
                    category.childCategories.forEach(function(sub) {
                        $('#subcategories').append('<option value=' + sub.id + '>' + sub.name + '</option>');
                    });
                }
            });
        }
    </script>
    <script>
        //const installments = [1, 2, 3, 6, 9, 12];
        const installments = [@(ViewBag.AvailableInstallments)];       

        function installmentChange(installmentCount, isActive) {
            @*console.log(installmentCount + ' taksit: ' + isActive);*@          
            if (isActive) {                
                installments.map(item => {
                    
                    if (item <= parseInt(installmentCount)) {
                        $('#installmentsChoices').append(`<input type="hidden" name="AvailableInstallments" id="installment_${item}"  value="${item}" />`);
                        $(`#ins${item}`).prop("checked", true);
                    }
                });
            } else {
                installments.map(item => {
                    $(`#installment_${item}`).remove();
                    @*console.log(item);*@
                    $(`#ins${item}`).prop("checked", false);
                });
            }
        }

        $("input[type=checkbox]").change(function () {
            installmentChange($(this).val(), $(this).is(":checked"));
        });
    </script>
    <script>
        $('input[name="PaymentMethodID"]').on('change',
            function() {
                if (parseInt($('input[name="PaymentMethodID"]:checked').val()) === @((int) Enums.PaymentMethods.KrediKartiIle))
                {
                    $('#installments').css('display', 'flex');
                    notify('info','@Localization.Get("Kredi kartı ile ödeme için para tipi TL olmalıdır.", "For credit card payment, the type of money must be TL.", lang)');
                    getPrices();
                } else {
                    $('#installments').css('display', 'none');
                    $('#prices').html('');
                    $('#save').css("display", "block");
                    @if (Model.IsPaymentStepActive)
                    {
                        <text>
                    Noty.closeAll('gittibupay');
                    $("#NeedForPay").effect("shake", { times: 2 }, 500);
                        </text>
                    }


                }
            });
    </script>
    <script>
        @if (Model.Advert != null)
        {

            <text>
                $('#moneyType').val(@Model.Advert.MoneyTypeID);
                $('#productStatus').val('@Model.Advert.ProductStatus');

                $('#pay_@Model.Advert.PaymentMethodID').attr('checked', 'checked');
                //$('input[name="PaymentMethodID"]').val(@Model.Advert.PaymentMethodID);
                if (parseInt($('#pay_@Model.Advert.PaymentMethodID').val()) ===
                    @((int) Enums.PaymentMethods.KrediKartiIle)) {
                    $('#installments').css('display', 'flex');
                    // notify('info', '@Localization.Get("Kredi kartı ile ödeme için para tipi TL olmalıdır.", "For credit card payment, the type of money must be TL.", lang)');
                    getPrices();
                } else {
                    $('#installments').css('display', 'none');
                    $('#prices').html('');
                    $('#save').css("display", "block");
                }
                var taksit = "@Model.Advert.AvailableInstallments";
                var bol = taksit.split(",");
                $.each(bol,
                    function(index, value) {
                        installmentChange(value, true);
                    });

                setTimeout(function() {
                        $('#categories').val(@(Model.Advert?.Category?.ParentCategoryID));
                        fillSubcategories($('#categories').val());
                    },
                    200);
                setTimeout(function() {
                        $('#subcategories').val(@Model.Advert.CategoryID);
                    },
                    400);
            </text>
        }


    </script>
    @if (Model.Advert != null)
    {
        <script>
            $(function () {
                $("#sortable").sortable({
                    update: function (event, ui) {
                        var items = $('#sortable li');
                        if (items.length == 0) {
                            noitfy("danger", '@Localization.Get("Fotoğraf bulunamadı", "Photo not found", lang)');
                            return;
                        }
                        var ids = [];
                        for (var i = 0; i < items.length; i++) {
                            var id = $($('#sortable li')[i]).prop("id").replace("q_", "");
                            ids.push(parseInt(id));
                        }
                        if (ids.length > 0) {
                            notify("info", '@Localization.Get("Lütfen bekleyiniz", "Please wait", lang)');
                            $.ajax({
                                url: "/UpdatePhotosOrder",
                                type: "POST",
                                data: { id: @Model.Advert.ID, photos: ids },
                                success: function (data) {
                                    if (data.isSuccess) {
                                        notify("success", data.message);
                                    } else {
                                        notify("danger", data.message);
                                    }
                                }
                            });
                        }
                    }
                });
                $("#sortable").disableSelection();
            });
            function publishRequest(id) {
                $.ajax({
                    url: '/DeleteAdPhoto',
                    data: { id },
                    type: 'POST',
                    dataType: 'json',
                    success: function(data) {
                        var type = '';
                        if (data.isSuccess) {
                            type = 'success';
                            $('#q_' + id).remove();
                        } else {
                            type = 'error';
                        }
                        new Noty({
                            theme: 'sunset',
                            type: type,
                            text: data.message,
                            progressBar: true,
                            timeout: 4000
                        }).show();
                    }
                });
            }
            function ask(id, name) {

                var q = ' @Localization.Get("Silmek istediğinize emin misiniz?", "Are you sure you want to delete?", lang) ';
                var n = new Noty({
                    container: '#q_' + id,
                    text: name + ' </br>' + q,
                    buttons: [
                        Noty.button('@Localization.Get("EVET", "YES", lang)',
                            'button w-button button-yes m-r-10',
                            function() {
                                publishRequest(id);
                                n.close();
                            },
                            { id: 'button1', 'data-status': 'ok' ,type:'button' }),
                        Noty.button('@Localization.Get("HAYIR", "NO", lang)',
                            'button w-button button-sil display-inline',
                            function () {
                                n.close();
                            }, {type:'button'})
                    ]
                });
                n.show();
            }
            function updateMainImage(mainImageId) {
                if (mainImageId == null) {
                    notify("error",
                        '@Localization.Get("Mevcut fotoğraflar kısmından bir fotoğraf seçmeniz gerekiyor.",
                             "You need to select a photo from the existing photos.", lang)');
                    return;
                }
                $("#inputM_" + mainImageId).prop("checked", true);
                notify("info", '@Localization.Get("Lütfen bekleyiniz", "Please wait", lang)');
                $.ajax({
                    url: "/UpdateMainPhoto",
                    type: "POST",
                    data: { id: @Model.Advert.ID, photoId: parseInt(mainImageId) },
                    success: function(data) {
                        if (data.isSuccess) {
                            notify("success", data.message);
                        } else {
                            notify("danger", data.message);
                        }
                    }
                });
            }

            function saveOrder() {
                var items = $('#sortable li');
                if (items.length == 0) {
                    noitfy("danger", '@Localization.Get("Fotoğraf bulunamadı", "Photo not found", lang)');
                    return;
                }
                var ids = [];
                for (var i = 0; i < items.length; i++) {
                    var id = $($('#sortable li')[i]).prop("id").replace("q_", "");
                    ids.push(parseInt(id));
                }
                if (ids.length > 0) {
                    notify("info", '@Localization.Get("Lütfen bekleyiniz", "Please wait", lang)');
                    $.ajax({
                        url: "/UpdatePhotosOrder",
                        type: "POST",
                        data: { id: @Model.Advert.ID, photos: ids },
                        success: function(data) {
                            if (data.isSuccess) {
                                notify("success", data.message);
                            } else {
                                notify("danger", data.message);
                            }
                        }
                    });
                }
            }
        </script>
    }
    <script>
        $('input[name="Title"]').keyup(function () {
            var index = this.SelectionStart;
            var currentLine = this.GetLineFromCharIndex(index);
            var text = $('input[name="Title"]').val();
            text = text.replace('&', ' ');
            var ilkarakter = text.substring(0, 1).toUpperCase();
            text = ilkarakter + text.substring(1, text.length).toLowerCase();
            $('input[name="Title"]').val(text);
            var currentColumn = index - this.GetFirstCharIndexFromLine(currentLine);

        });
        $('input[name="Brand"]').keyup(function () {
            var text = $('input[name="Brand"]').val();
            var ilkarakter = text.substring(0, 1).toUpperCase();
            text = ilkarakter + text.substring(1, text.length).toLowerCase();
            $('input[name="Brand"]').val(text);
        });
        $('input[name="Model"]').keyup(function () {
            var text = $('input[name="Model"]').val();
            var ilkarakter = text.substring(0, 1).toUpperCase();
            text = ilkarakter + text.substring(1, text.length).toLowerCase();
            $('input[name="Model"]').val(text);
        });


    </script>

    @*<script>
            $("#price, #newPrice").change(function (e) {
                $(".priceMessage").hide();
                var lil = parseInt($("#price").val(), 10);
                var big = parseInt($("#newPrice").val(), 10);
                if (lil > big) {
                    var targ = $(e.target);
                    if (targ.is("#price")) {
                        $(".priceMessage").show();
                        $('#price').val(big);
                    }
                }
            });
        </script>*@
}

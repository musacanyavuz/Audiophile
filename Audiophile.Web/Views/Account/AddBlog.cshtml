@model AddBlogViewModel

@{
    var lang = Constants.GetLang(Context.Session.GetString("lang"));
    ViewBag.Title = Localization.Get(" Giriş Formu", "Posting Form", lang);
    Layout = "_Layout";
}
@section style{
    <link rel="stylesheet" href="~/Content/css/dropzone.min.css">
    <style>
        .dz-image-preview {
            display: table-cell;
            text-align: center;
        }
    </style>
    <link rel="stylesheet" href="~/Content/css/jquery-ui.css">
    <link rel="stylesheet" href="~/Content/css/cropper.css">
}


<div class="sec-altsayfa sec-hesaplar section-1">
    <div class="w-container">

        <div class="w-clearfix">

            <div class="div-block-20 div-ilan hesap urun-ekle w-clearfix">
                <h4 class="h2 h4 h-kat h-kategori">@ViewBag.Title</h4>
            </div>

            <div class="div-block-17 form-wrapper form-hesaplar urun-ekle w-clearfix">
                <div class="form-block-5 w-form">

                    @if (Model.BlogPost?.Images != null && Model.BlogPost.Images.Any())
                    {
                        <h5>@Localization.Get("Mevcut Fotoğraflar", "Added Photos", lang)</h5>
                        <div class="row">
                            @foreach (var photo in Model.BlogPost.Images)
                            {
                                <div class="col" id="q_@photo.ID">
                                    <div class="card width-rem-10">
                                        <img class="card-img-top" src="@photo.Source">
                                        <div class="card-body">
                                            <h5 class="card-title">@photo.CreatedDate.ToString("g")</h5>
                                            <a href="javascript:;" onclick="ask(@photo.ID, '')" class="btn btn-block btn-danger">@Localization.Get("Sil", "Delete", lang)</a>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @using (Html.BeginForm("SaveBlog", "Account", FormMethod.Post, new { @class = "w-clearfix", enctype = "multipart/form-data", id = "frmAddBlog" }))
                    {
                        <div class="w-form">
                            <label for="name-4" class="field-label">@Localization.Get("Kategori", "Category", lang)*:</label>

                            <select class="textfield w-input" id="category" name="BlogPost.CategoryId" onchange="changeCategory();">
                                <option value="@((int) Enums.BlogCategory.HaberlerKampanyalar)">@Localization.Get("Haberler, Kampanyalar", "News, Campaings", lang)</option>
                                <option value="@((int) Enums.BlogCategory.SaticilarIthalatcilar)">@Localization.Get("Satıcılar, İthalatçılar", "Sellers, Importers", lang)</option>
                                <option value="@((int) Enums.BlogCategory.OdyofilSistemleri)">@Localization.Get("Blog: Odyofil Sistemler (ücretsiz)", "Blog: Audiophile Systems (free)", lang)</option>
                                <option value="@((int) Enums.BlogCategory.YazilarMakaleler)">@Localization.Get("Blog: Yazı, Makale (ücretsiz)", "Blog: Article (free)", lang)</option>
                            </select>


                            <label for="name-4" class="field-label">@Localization.Get("Yayınlanma Süresi", "Period", lang)*:</label>

                            <select class="textfield w-input" id="doping"></select>
                        </div>

                        <label class="field-label">@Localization.Get("Başlık", "Title", lang):</label>
                        <input class="textfield w-input" id="title" maxlength="250" name="Blog.Title" type="text" value="" onkeydown="letterControl(this,event)" />

                        <label class="field-label">@Localization.Get("Kısa İçerik", "Subtitle", lang):</label>
                        <input class="textfield w-input" id="shortContent" maxlength="250" name="Blog.ShortContent" type="text" value="" width="100%" />

                        <label for="name-4" class="field-label">@Localization.Get("Etiketler (Virgülle ayırınız)", "Keywords (Split by comma)", lang):</label>
                        <input class="textfield w-input" id="keywords" maxlength="250" name="Blog.Keywords" type="text" value="" width="100%" />

                        <div class="div--marka w-clearfix">
                            <div class="p-b-5">
                                <label class="field-label">@Localization.Get("Fotoğraf Ekle", "Add Photos", lang)</label>
                            </div>
                            <hr><br>
                            <h5>@Localization.Get("İşaretlediğiniz görsel ana görsel olarak kullanılacak.", "Marked picture will be used as main picture", lang)</h5>
                            <small>*@Localization.Get("Max. Dosya Boyutu: 10mb", "Max. File Size: 10mb", lang) </small>
                            <div>
                                @*<form action="/Adverts/AddListing" enctype="multipart/form-data" method="POST">*@
                                <div class="dropzone" id="myDropzone">
                                    <div class="dz-message" data-dz-message>
                                        <span>
                                            @Localization.Get("Fotoğraf eklemek için buraya tıklayınız veya fotoğrafları sürükleyiniz", "Click here to add photos or drag photos", lang)
                                        </span>
                                    </div>
                                </div> <br />
                                @*</form>*@
                            </div>
                        </div>


                        <label for="name-4">@Localization.Get("İçerik", "Content", lang):</label>
                        <textarea class="textfield w-input" cols="1" id="content" name="Blog.Content" rows="10"></textarea>
                        <br />
                        <div id="selectPaymentMethod">
                            <label for="name-2" class="field-label kirmizi"> @Localization.Get("Ödeme Seçenekleri", "Payment Methods", lang)</label>
                            <div class="form-wrapper form-hesaplar urun-ekle w-clearfix">
                                <div class="div-block-33 nerede1 f-l width-100-50">
                                    <label class="m-auto text-center">
                                        <input class="w-checkbox-input" type="radio" name="paymentType" value="false">@Localization.Get("Banka Havalesi", "Bank Transfer", lang)
                                    </label>
                                </div>
                                <div class="div-block-33 nerede1 width-100-50">
                                    <label class="m-auto text-center">
                                        <input class="w-checkbox-input" type="radio" name="paymentType" value="true">@Localization.Get("Kredi Kartı", "Credit Card", lang)
                                    </label>
                                </div>
                            </div>
                        </div>
                        <div class="row display-none" id="bankPayment">
                            <h5>@TextService.GetText((int)Enums.Texts.BankaHavalesiText, lang)</h5>
                        </div>

                        <div class="form-block-5 w-form display-none" id="creditCardPayment">
                            <h3 class="mb-5">@Localization.Get("Ödeme Bilgileri", "Payment Information", lang)</h3>
                            <div class="row mb-0">
                                <div class="col-md-12">
                                    <input class="textfield field-col kart w-input" id="CardName" name="CardName" placeholder="@Localization.Get("Kart Üzerindeki Ad Soyad", "Name Surname", lang)" type="text" value="" />
                                </div>
                                <div class="col-md-12">
                                    <input class="textfield field-col kart w-input" id="CardNumber" name="CardNumber" placeholder="@Localization.Get("Kart No", "Card No", lang)" type="text" value="" />
                                </div>
                            </div>
                            <div class="row mb-0">
                                <div class="col-md-4">
                                    <select class="textfield w-select" data-val="true" data-val-number="The field Month must be a number." data-val-required="The Month field is required." id="Month" name="Month">
                                        <option value="">@Localization.Get("Ay", "Month", lang)</option>
                                        <option value="1">01</option>
                                        <option value="2">02</option>
                                        <option value="3">03</option>
                                        <option value="4">04</option>
                                        <option value="5">05</option>
                                        <option value="6">06</option>
                                        <option value="7">07</option>
                                        <option value="8">08</option>
                                        <option value="9">09</option>
                                        <option value="10">10</option>
                                        <option value="11">11</option>
                                        <option value="12">12</option>
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <select class="textfield w-select" data-val="true" data-val-number="The field Year must be a number." data-val-required="The Year field is required." id="Year" name="Year">
                                        <option value="">@Localization.Get("Yıl", "Year", lang)</option>
                                        @for (int i = DateTime.Now.Year; i <= DateTime.Now.Year + 15; i++)
                                        {
                                            <option value="@i">@i</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <input class="textfield w-input" id="CVC" maxlength="4" name="CVC" placeholder="CVC" type="text" value="" />
                                </div>
                            </div>
                        </div>

                        <button type="button" id="save" class="button button-main button-satn button-submit submit-center w-button">@Localization.Get("Kaydet", "Save", lang)</button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<div id="preview" class="preview display-none">
    <li>
        <div>
            <div class="dz-preview dz-file-preview">
                <input type="radio" name="main-image" class="f-l m-100-1 cursor-pointer" />
                <img data-dz-thumbnail />
                <div class="dz-progress">
                    <span class="dz-upload" data-dz-uploadprogress></span>
                </div>
                <div class="dz-success-mark">
                    <span>✔</span>
                </div>
                <div class="dz-error-mark">
                    <span>✘</span>
                </div>
                <div class="dz-error-message">
                    <span data-dz-errormessage></span>
                </div>
            </div>
        </div>
    </li>
</div>



@section Scripts{

    <script src="~/Content/script/cropper.js"></script>
    <script src="~/Content/script/jquerycropper.js"></script>
    <script src="~/Content/script/jquery-ui.min.js"></script>
    <script src="/Content/plugins/dropzone/dropzone.js"></script>
    <script>
        var dopings = @Html.Raw(Json.Serialize(Model.Dopings.OrderBy(x=>x.ID)));
        function changeCategory() {
            var id = parseInt($('#category').val());
            $('#doping').html('');

            if (id === @((int)Enums.BlogCategory.HaberlerKampanyalar)) {
                $('#selectPaymentMethod').css("display", "block");
                fillDopings(@((int)Enums.DopingGroup.HaberKampanya));
            }
            else if (id === @((int)Enums.BlogCategory.SaticilarIthalatcilar)) {
                $('#selectPaymentMethod').css("display", "block");
                fillDopings(@((int)Enums.DopingGroup.SaticiIthalatci));
            }
            else{
                $('#selectPaymentMethod').css("display", "none");
                $('#doping').append('<option value="0">@Localization.Get("Ücretsiz","Free",lang)</option>');
            }
        }

        function fillDopings(dopingType) {
            dopings.forEach(function(d) {
                if (d.group === dopingType) {
                    $('#doping').append('<option value="'+d.id+'">'+d.day+' @Localization.Get("gün","days",lang) '+d.price+' TL</option>');
                }
            });
        }

        fillDopings(@((int)Enums.DopingGroup.HaberKampanya));
    </script>

    <script>
        function ask(id, name) {
            var q = ' @Localization.Get("Silmek istediğinize emin misiniz?", "Are you sure you want to delete?", lang) ';
            var n = new Noty({
                container: '#q_'+id,
                text: name + ' </br>' + q,
                buttons: [
                    Noty.button('@Localization.Get("EVET", "YES", lang)',
                        'btn btn-success',
                        function() {
                            deleteImage(id);
                            n.close();
                        },
                        { id: 'button1', 'data-status': 'ok' }),
                    Noty.button('@Localization.Get("HAYIR", "NO", lang)',
                        'btn btn-error',
                        function() {
                            n.close();
                        })
                ]
            });
            n.show();
        }
        function deleteImage(id) {
            $.ajax({
                url: '/DeleteBlogImage',
                data: { id },
                type: 'POST',
                dataType: 'json',
                success: function(data) {
                    var type = '';
                    if (data.isSuccess) {
                        type = 'success';
                        $('#q_' + id).remove();
                    } else {
                        type = 'error';
                    }
                    new Noty({
                        theme: 'sunset',
                        type: type,
                        text: data.message,
                        progressBar: true,
                        timeout: 4000
                    }).show();
                }
            });
        }
    </script>

    <script src="/Content/plugins/tinymce/tinymce.min.js"></script>
    <script>
        tinymce.init({
            selector: '#content',
            plugins: 'image code',
            toolbar: 'undo redo | image code',
            menubar: false,
            plugins: [
                "advlist autolink lists link image charmap print preview hr anchor pagebreak",
                "searchreplace wordcount visualblocks visualchars code fullscreen",
                "insertdatetime media nonbreaking save table contextmenu directionality",
                "emoticons template paste textcolor colorpicker textpattern"
            ],
            image_advtab: true,
            toolbar: 'insert | undo redo |  formatselect | bold italic underline backcolor  | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | image | help',
            // without images_upload_url set, Upload tab won't show up
            images_upload_url: '/Account/Blog/UploadImage',

            // we override default upload handler to simulate successful upload
            images_upload_handler: function (blobInfo, success, failure) {

                var xhr, formData;
                xhr = new XMLHttpRequest();
                xhr.withCredentials = false;
                xhr.open('POST', '/Account/Blog/UploadImage');
                xhr.onload = function () {
                    var json;

                    if (xhr.status !== 200) {
                        failure('HTTP Error: ' + xhr.status);
                        return;
                    }
                    json = JSON.parse(xhr.responseText);

                    if (!json || typeof json.location != 'string') {
                        failure('Invalid JSON: ' + xhr.responseText);
                        return;
                    }
                    success(json.location);
                };
                formData = new FormData();
                formData.append('file', blobInfo.blob(), blobInfo.fileName);
                xhr.send(formData);


            },

            init_instance_callback: function (ed) {
                //ed.execCommand('mceImage');
            }
        });
    </script>

    <script>

        const imageIds = [];
        let useCreditCard = false;
        function notyError(message) {
            new Noty({
                theme: 'sunset',
                type: 'error',
                text: message,
                progressBar: true,
                timeout: 4000
            }).show();
        }

        Dropzone.prototype.defaultOptions.dictRemoveFile = '@Localization.Get("Resmi Kaldır","Remove File",lang)';
        var filesAdded = 0;

        Dropzone.options.myDropzone = {
            url: '/MyAccount/UploadBlogImage/',
            autoProcessQueue: true,
            uploadMultiple: true,
            timeout: 540000,
            parallelUploads: 10,
            maxFiles: 10,
            maxFilesize: 100,
            paramName: "Files",
            acceptedFiles: 'image/*',
            addRemoveLinks: true,
            transformFile: function (file, done) {
                var boyut = (file.size) / 1024;
                if (boyut < 10000) {
                    // Create Dropzone reference for use in confirm button click handler
                    var myDropZone = this;
                    // Create the image editor overlay
                    var editor = document.createElement('div');
                    editor.style.position = 'fixed';
                    editor.style.left = 0;
                    editor.style.right = 0;
                    editor.style.top = 0;
                    editor.style.bottom = 0;
                    editor.style.zIndex = 9999;
                    editor.style.backgroundColor = '#000';
                    document.body.appendChild(editor);
                    // Create confirm button at the top left of the viewport
                    var buttonConfirm = document.createElement('button');
                    buttonConfirm.classList.add("button");
                    buttonConfirm.classList.add("w-button");
                    buttonConfirm.style.position = 'absolute';
                    buttonConfirm.style.width = '120px';
                    buttonConfirm.style.left = '10px';
                    buttonConfirm.style.top = '10px';
                    buttonConfirm.style.zIndex = 9999;
                    buttonConfirm.textContent = 'Tamam';
                    editor.appendChild(buttonConfirm);

                    var buttonRotate = document.createElement('button');
                    buttonRotate.classList.add("button");
                    buttonRotate.classList.add("w-button");
                    buttonRotate.style.position = 'absolute';
                    buttonRotate.style.left = '10px';
                    buttonRotate.style.width = '120px';
                    buttonRotate.style.top = '52px';
                    buttonRotate.style.zIndex = 9999;
                    buttonRotate.textContent = 'Sola Döndür';
                    editor.appendChild(buttonRotate);

                    var buttonRotateTers = document.createElement('button');
                    buttonRotateTers.classList.add("button");
                    buttonRotateTers.classList.add("w-button");
                    buttonRotateTers.style.position = 'absolute';
                    buttonRotateTers.style.left = '10px';
                    buttonRotateTers.style.top = '94px';
                    buttonRotateTers.style.width = '120px';
                    buttonRotateTers.style.zIndex = 9999;
                    buttonRotateTers.textContent = 'Sağa Döndür';
                    editor.appendChild(buttonRotateTers);

                    var buttonCancel = document.createElement('button');
                    buttonCancel.classList.add("button");
                    buttonCancel.classList.add("w-button");
                    buttonCancel.style.position = 'absolute';
                    buttonCancel.style.left = '10px';
                    buttonCancel.style.top = '142px';
                    buttonCancel.style.width = '120px';
                    buttonCancel.style.zIndex = 9999;
                    buttonCancel.textContent = 'İptal';
                    editor.appendChild(buttonCancel);

                    var image = new Image();
                    image.src = URL.createObjectURL(file);
                    editor.appendChild(image);
                    var cropper = new Cropper(image,
                        {
                            viewMode: 0,
                            rotatable: true,
                            aspectRatio: 1,
                            ready: function() {
                                cropper.zoom(-0.5);
                            }
                        });
                    buttonCancel.addEventListener("click", function () {
                        document.body.removeChild(editor);
                        myDropZone.removeFile(file);
                    });
                    buttonRotate.addEventListener('click',
                        function() {

                            cropper.rotate(-90);
                        });


                    buttonRotateTers.addEventListener('click',
                        function() {

                            cropper.rotate(90);

                        });
                    buttonConfirm.addEventListener('click',
                        function() {
                            // Get the canvas with image data from Cropper.js
                            var canvas = cropper.getCroppedCanvas({
                                maxWidth: 4096,
                                maxHeight: 4096,
                                fillColor: "#fff"
                            });
                            // Turn the canvas into a Blob (file object without a name)
                            canvas.toBlob(function(blob) {
                                // Create a new Dropzone file thumbnail
                                myDropZone.createThumbnail(
                                    blob,
                                    myDropZone.options.thumbnailWidth,
                                    myDropZone.options.thumbnailHeight,
                                    myDropZone.options.thumbnailMethod,
                                    false,
                                    function(dataURL) {

                                        // Update the Dropzone file thumbnail
                                        myDropZone.emit('thumbnail', file, dataURL);
                                        // Return the file to Dropzone
                                        done(blob);
                                    });
                            });
                            // Remove the editor from the view
                            document.body.removeChild(editor);
                        });

                }

            },
            previewTemplate: $('#preview').html(),
            init: function() {
                var myDropzone = this;

                this.on("sendingmultiple", function(data, xhr, formData) {

                    const uuids = data.map(file => file.upload.uuid);
                    formData.append("fileIds", JSON.stringify(uuids));

                    new Noty({
                        theme: 'sunset',
                        type: 'info',
                        text: '@Localization.Get("Resim yükleniyor...","Please wait...",lang)',
                        timeout: 10000
                    }).show();
                });
                this.on("addedfile", function (file) {
                    @* console.log(file);*@
                    $(file.previewElement).find('input').val(file.name);
                    filesAdded++;
                });
                this.on("queuecomplete", function (file) {
                    //var route = '(Localization.Get("/IlanEkle/IlanDetaylari/", "/AddListing/AdDetails/", lang)+Model)';
                    //window.location = route;
                });
                this.on("success", function (file, response) {
                    @*console.log(file);*@
                    if (response) {
                        new Noty({
                            theme: 'sunset',
                            type: 'success',
                            text: "Resim yüklendi",
                            progressBar: true,
                            timeout: 10000
                        }).show();
                        response.map(item => {
                            if (file.upload.uuid === item.uuid) {
                                $(file.previewElement).find(".dz-progress").remove();
                                $(file.previewElement).attr("id", item.imageId);
                                $($(file.previewElement).find("input")).attr("value", item.imageId);
                                imageIds.push(item.imageId);
                            }

                        });

                    }
                });
                this.on('error', function(file, response) {
                    @*console.log('upload error');
                    console.log(response);
                    console.log('file');
                    console.log(file);*@
                });
            }
        }

        document.getElementById("save").addEventListener("click", function(e) {
            if (typeof $('input[name="main-image"]:checked').val()==="undefined") {
                notyError('@Localization.Get("Kapak fotoğrafı seçmediniz.","You did not select main photo.",lang)');
                return;
            }
            if ($('#title').val()==="") {
                notyError('@Localization.Get("Lütfen başlık giriniz.","Please enter title.",lang)');
                return;
            }
            if ($('#shortContent').val()==="") {
                notyError('@Localization.Get("Lütfen kısa bir açıklama giriniz.","Please enter subtitle.",lang)');
                return;
            }
            if (parseInt($('#doping').val())>0 && $('input[name="paymentType"]:checked').val() == null ) {
                notyError('@Localization.Get("Lütfen ödeme türü seçiniz.","Please select a payment method.",lang)');
                return;
            }
            if ($('input[name="paymentType"]:checked').val()=='true' &&
                ($('#CardName').val()==="" || $('#CardNumber').val()==="" || $('#CVC').val()==="") ) {
                notyError('@Localization.Get("Lütfen kredi kartı bilgilerinizi doldurun.","Please fill in your credit card information.",lang)');
                return;
            }
            const formData = {
                MainImage: $('input[name="main-image"]:checked').val(),
                blogPost: {
                    Content: tinyMCE.activeEditor.getContent(),
                    Title: $('#title').val(),
                    CategoryID:$('#category').val(),
                    ShortContent:$('#shortContent').val(),
                    Tags:$('#keywords').val()
                },
                dopingId: $('#doping').val(),
                imageIds: imageIds,
                useCreditCard: useCreditCard,
                fullName: $('#CardName').val(),
                number:  $('#CardNumber').val(),
                month: $('#Month').val(),
                year: $('#Year').val(),
                cvc:$('#CVC').val()
            };
            Noty.closeAll(); // Closes all notifications
            new Noty({
                theme: 'sunset',
                type: 'info',
                text: "Kayıt yapılıyor lütfen bekleyiniz",
                progressBar: true
            }).show();
            $.post("/MyAccount/SaveBlog", formData, (result) => {
                Noty.closeAll(); // Closes all notifications


                new Noty({
                    theme: 'sunset',
                    type: 'success',
                    text: result.message,
                    progressBar: true,
                    timeout: 4000
                }).show();
                var route = '';
                var cat = parseInt($('#category').val());
                if(cat === @((int)Enums.BlogCategory.HaberlerKampanyalar) || cat === @((int)Enums.BlogCategory.SaticilarIthalatcilar)){
                    route = '@Constants.GetURL(Enums.Routing.HaberVeFirmalarim, lang)';
                }
                else {
                    route = '@Constants.GetURL(Enums.Routing.SistemVeMakalelerim, lang)';
                }
                setTimeout(function() {
                    document.location = route;
                }, 2000);

            });
            $('#save').css('display', 'none');
            e.preventDefault();
            e.stopPropagation();

        });

        $('input[name="paymentType"]').on('change',
            function() {
                if ($(this).val() === 'false') {
                    $('#bankPayment').css('display', 'block');
                    $('#creditCardPayment').css('display', 'none');
                    useCreditCard = false;
                }
                if ($(this).val() === 'true') {
                    useCreditCard = true;
                    $('#bankPayment').css('display', 'none');
                    $('#creditCardPayment').css('display', 'block');
                }
            });
    </script>
}

